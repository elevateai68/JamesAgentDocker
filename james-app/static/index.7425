<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>James Agency</title>
  <style>
    body { font-family: 'Segoe UI', sans-serif; background: #3c1053; color: white; text-align: center; padding: 2em; }
    .status { display: inline-block; padding: 0.5em 1em; border-radius: 20px; font-weight: bold; }
    .status.online { background: #28a745; }
    .status.turbo-off { background: #dc3545; margin-top: 1em; }
    #activityStatus { margin-top: 1em; font-size: 0.9em; color: #ffecb3; }
    .input-group { margin: 1em auto; max-width: 500px; }
    input, textarea, button { width: 100%; margin: 0.5em 0; padding: 0.75em; border: none; border-radius: 5px; font-size: 1em; }
    button { background: orange; font-weight: bold; cursor: pointer; }
    #responseBox { background: #ad5389; border-radius: 8px; padding: 1em; margin-top: 1em; min-height: 100px; color: black; max-width: 500px; margin: auto; }
    .section-title { margin-top: 2em; font-size: 1.2em; font-weight: bold; }
    .mic-controls { display: flex; gap: 0.5em; justify-content: space-between; }
    .mic-button, .mute-button, .pause-button { flex: 1; background: #007bff; color: white; }
    #ttslog { margin: 1em auto 0; max-width: 500px; color: #ffe0b2; font-size: 0.9em; }
  </style>
</head>
<body>
  <h1>James Agency</h1>
  <div class="status online">James is online and ready</div>
  <div class="status turbo-off">Turbo James: Off</div>
  <div id="activityStatus"></div>

  <div class="input-group">
    <input id="mainPrompt" type="text" placeholder="get btc current price james" />
    <textarea id="contextInput" placeholder="Optional context"></textarea>
    <button onclick="sendPromptWS()">Send</button>
    <div class="mic-controls">
      <button class="mic-button" onclick="startVoiceInput()">üé§ Speak</button>
      <button class="mute-button" onclick="toggleMute()">üîá Mute</button>
      <button class="pause-button" onclick="togglePauseOrRead()">‚è∏Ô∏è Pause</button>
    </div>
  </div>

  <div id="responseBox">Waiting for response...</div>
  <div id="ttslog"></div>

  <div class="section-title">üìå Remember Something</div>
  <div class="input-group">
    <input id="memoryWhat" type="text" placeholder="What to remember?" />
    <input id="memoryWho" type="text" placeholder="Who or What?" />
    <input id="memoryFile" type="file" />
    <button onclick="sendMemory()">Remember</button>
  </div>

  <script>
    let mute = false, paused = false, lastMsg = '', ws, audio = null, lastAudioUrl = null;
    const activityStatus = document.getElementById('activityStatus');
    const pauseBtn = document.querySelector('.pause-button');
    const ttslog = document.getElementById('ttslog');
    const r = document.getElementById('responseBox');

    function coquiSpeak(text) {
      if (mute) { ttslog.textContent = "Muted."; return; }
      if (!text || !text.trim() || /^[\s.?!,-]*$/.test(text)) {
        ttslog.textContent = "Skipped empty/non-verbal message.";
        return;
      }
      ttslog.textContent = "Synthesizing speech (Coqui)...";
      fetch(`${location.protocol}//${location.hostname}:5002/tts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: text, speaker: 'p236' })
      }).then(resp => {
          if (!resp.ok) throw new Error("Coqui backend error: "+resp.status);
          return resp.blob();
        }).then(blob => {
          if (audio) { audio.pause(); audio = null; }
          if (lastAudioUrl) URL.revokeObjectURL(lastAudioUrl);
          const url = URL.createObjectURL(blob);
          lastAudioUrl = url;
          audio = new Audio(url);
          audio.onended = () => { URL.revokeObjectURL(url); lastAudioUrl = null; };
          audio.play();
          paused = false;
          updatePauseBtn();
          ttslog.textContent = "Playback (Coqui Bond) complete.";
        }).catch(e => ttslog.textContent = "Coqui error: " + e.message);
    }

    function sendPromptWS() {
      const p = document.getElementById('mainPrompt').value;
      const c = document.getElementById('contextInput').value;
      r.textContent = ''; lastMsg = '';
      activityStatus.textContent = 'üïµÔ∏è James is analyzing with maximum discretion...';
      const proto = location.protocol === 'https:' ? 'wss' : 'ws';
      ws = new WebSocket(`${proto}://${location.host}/ws`);
      ws.onopen = () => ws.send(JSON.stringify({ prompt: p, context: c }));
      ws.onmessage = e => {
        lastMsg += e.data;
        if (lastMsg.includes('[Done]')) {
          let clean = lastMsg.replace(/\[Done\]/gi, '').trim();
          r.textContent = clean;
          coquiSpeak(clean);
          lastMsg = '';
        } else {
          r.textContent = lastMsg;
        }
      };
      ws.onerror = () => activityStatus.textContent = '‚ö†Ô∏è Connection issue.';
      ws.onclose = () => activityStatus.textContent = '‚úÖ Response complete.';
    }

    function sendMemory() {
      const w = document.getElementById('memoryWhat').value;
      const q = document.getElementById('memoryWho').value;
      const f = document.getElementById('memoryFile').files[0];
      const fd = new FormData(); fd.append('what', w); fd.append('who', q);
      if (f) fd.append('file', f);
      fetch('/remember', { method: 'POST', body: fd })
        .then(r => r.json()).then(_ => alert('Saved successfully')).catch(e => alert('Error: ' + e.message));
    }

    function startVoiceInput() {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (!SpeechRecognition) return alert('Web Speech API not supported in this browser');
      const rec = new SpeechRecognition(); rec.lang = 'en-GB'; rec.interimResults = false; rec.maxAlternatives = 1;
      rec.onresult = e => { document.getElementById('mainPrompt').value = e.results[0][0].transcript; setTimeout(sendPromptWS, 200); };
      rec.onerror = e => alert('Speech recognition error:' + e.error);
      rec.start();
    }

    function toggleMute() {
      mute = !mute;
      document.querySelector('.mute-button').textContent = mute ? 'üîà Unmute' : 'üîá Mute';
      if (audio) { audio.muted = mute; }
    }

    function updatePauseBtn() {
      // Show ‚Äú‚ñ∂Ô∏è Resume‚Äù if paused, else ‚Äú‚è∏Ô∏è Pause‚Äù
      pauseBtn.textContent = paused ? "‚ñ∂Ô∏è Resume" : "‚è∏Ô∏è Pause";
    }

    function togglePauseOrRead() {
      // If paused and user has selected text, send it to Coqui
      const sel = window.getSelection().toString().trim();
      if (paused && sel) {
        coquiSpeak(sel);
        return;
      }
      // Otherwise, toggle pause/resume as normal
      if (audio) {
        if (!paused) {
          audio.pause();
          paused = true;
        } else {
          audio.play();
          paused = false;
        }
        updatePauseBtn();
      }
    }
  </script>
</body>
</html>

